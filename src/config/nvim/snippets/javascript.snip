# Functions --------------------------------------------------------------------

snippet function
alias fu fun func funct functi functio
options word
  function ${1:#:function_name} (${2:#:argument}) {
      ${0:TARGET}
  }

snippet async-function
alias async
options word
  async function ${1:#:function_name} (${2:#:argument}) {
      ${0:TARGET}
  }

snippet arrow-function
alias fn (
options word
  (${1:#:argument}) => {
      ${0:TARGET}
  }

snippet async-arrow-function
alias async-fn
options word
  async (${1:#:argument}) => {
      ${0:TARGET}
  }

# ------------------------------------------------------------------------------

snippet await
alias aw awa awai
options word
  await ${0:TARGET}

snippet return
alias ret retu retur
options word
  return ${0:TARGET}

snippet map
alias m ma
options word
  map((${1:#:#x}) => {
      ${0:TARGET}
  })

snippet reduce
alias red redu reduc
options word
  reduce(accu, (${1:#:#x}) => {
      ${0:TARGET}
      return accu;
  }, [])

snippet new-promise
alias np
options word
  new Promise((resolve, reject) => {
      ${0:TARGET}
  })

snippet test
alias te tes
options word
  test('${1:#:#x}', async function (assert) {
      ${0:TARGET}
      assert.end();
  });

# Variables --------------------------------------------------------------------

snippet const
alias c co con cons
options word
  const ${1:#:#name} = ${0:TARGET};

snippet let
alias l le
options word
  let ${1:#:#name} = ${0:TARGET};


# Modules ----------------------------------------------------------------------

snippet require
alias re req requ requi requir
options word
  require('${0:TARGET}');

snippet     import
abbr        import { member, ... } from "module-name";
options     head
  import { ${1:MEMBERS} } from "${0:TARGET}";

snippet     import-default
abbr        import defaultMember from "module-name";
options     head
  import ${1:defaultMember} from "${0:TARGET}";

snippet     import-all
abbr        import * as NAME from "...";
options     head
  import * as ${1:NAME} from "${0:TARGET}";

snippet     import-default-member
abbr        import defaultMember, { member, ... } from "module-name";
options     head
  import ${1:defaultMember}, { ${2:MEMBERS} } from "${0:TARGET}";

# ------------------------------------------------------------------------------

snippet if
options head
  if (${1:true}) {
      ${0:TARGET}
  }

snippet if-else
abbr ife
options head
  if (${1:#:condition}) {
      ${2:TARGET}
  } else {
      ${3}
  }

snippet for
options head
  for (var ${1:i} = 0; $1 < ${2:#:Things}.length; ++$1) {
      ${0:TARGET}
  }

snippet forin
options head
  for (var ${1:i} in ${2:#:Things}) {
      ${0:TARGET}
  }

snippet forof
options head
  for (let ${1:i} of ${2:#:Things}) {
      ${0:TARGET}
  }

snippet while
options head
  while (${1:true}) {
      ${0:TARGET}
  }

snippet switch
options head
  switch (${1:#:var}) {
      case ${2:#:val}:
          ${0:TARGET}
      break;
  }

snippet try
options head
  try {
      ${1:TARGET}
  } catch (${2:e}) {
      ${3}
  }

snippet try_finally
options head
  try {
      ${1:TARGET}
  } catch (${2:e}) {
      ${3}
  } finally {
      ${4}
  }

snippet key-value
abbr :,
options word
  ${1:#:value_name}: ${0:#:value},

snippet console-log
alias cl
options head
  console.log('>> ${0}', $0);

snippet js
options head
  JSON.stringify(${1:TARGET}, null, 2);

snippet jsc
options head
  console.log(JSON.stringify(${1:TARGET}, null, 2));

snippet     class
abbr        class {...}
options     head
  class ${1:#:NAME} {
      constructor(${2:#:ARGS}) {
          ${0:TARGET}
      }
  }

snippet     class-extends
abbr        class extends {...}
options     head
  class ${1:#:NAME} extends ${2:#:SuperClass} {
      constructor(${3:#:ARGS}) {
          ${0:TARGET}
      }
  }

snippet     static
options     head
  static ${1:#:NAME} (${2:#:ARGS}) {
      ${0:TARGET}
  }

snippet     set
options     head
  set ${1:#:NAME} (${2:#:ARGS}) {
      ${0:TARGET}
  }

snippet     get
options     head
  get ${1:#:NAME} () {
      ${0:TARGET}
  }

