# Alacritty configuration for Chadwick Dahlquist

# ------------------------------------------------------------------------------

env:
  TERM: screen-256color # this is what neovim needs

dimensions:
  columns: 80
  lines: 24

# Adds this many blank pixels of padding around the window Units are physical pixels;
# this is not DPI aware.  (change requires restart)
padding:
  x: 6
  y: 6

# The FreeType rasterizer needs to know the device DPI for best results
# (changes require restart)
dpi:
  x: 96.0
  y: 96.0

# Display tabs using this many cells (changes require restart)
tabspaces: 4


# Font -------------------------------------------------------------------------

font:
  use_thin_strokes: true

  normal:
    family: DejaVu Sans Mono
  bold:
    family: DejaVu Sans Mono
  italic:
    family: DejaVu Sans Mono
  size: 13.0

  # Offset is the extra space around each character.
  # offset.y can be thought of as modifying the linespacing, and offset.x as modifying the letter spacing.
  offset:
    x: 2.0
    y: 2.0

  # Glyph offset determines the locations of the glyphs within their cells with the default being at the bottom.
  # Increase the x offset to move the glyph to the right, increase the y offset to move the glyph upward.
  glyph_offset:
    x: 0.0
    y: 0.0


# Colors -----------------------------------------------------------------------

# Custom generated pallete based on HUSL colors

# bg:             '0x272524'
# fg:             '0xb8b8aa'
# black-normal:   '0x5f5955'
# black-dim:      '0x403c3a'
# white-normal:   '0xc0b5ad'
# white-dim:      '0x8a827e'
# red-normal:     '0xd8af8e'
# red-dim:        '0xa57b55'
# yellow-normal:  '0xa8bf85'
# yellow-dim:     '0x748c4a'
# green-normal:   '0x71c6af'
# green-dim:      '0x22947b'
# cyan-normal:    '0x83bfda'
# cyan-dim:       '0x418da9'
# blue-normal:    '0xc6ade1'
# blue-dim:       '0x9478b0'
# magenta-normal: '0xe6a4be'
# magenta-dim:    '0xb46f8c'

background_opacity: 1.0

colors:
  primary:
    background: '0x272524'
    foreground: '0xb8b8aa'

  # Colors the cursor will use if `custom_cursor_colors` is true
  cursor:
    text: '0x000000'
    cursor: '0xffffff'

  normal:
    black:   '0x5f5955'
    red:     '0xd8af8e'
    green:   '0x71c6af'
    yellow:  '0xa8bf85'
    blue:    '0xc6ade1'
    magenta: '0xe6a4be'
    cyan:    '0x83bfda'
    white:   '0xc0b5ad'

  bright:
    black:   '0x5f5955'
    red:     '0xd8af8e'
    green:   '0x71c6af'
    yellow:  '0xa8bf85'
    blue:    '0xc6ade1'
    magenta: '0xe6a4be'
    cyan:    '0x83bfda'
    white:   '0xc0b5ad'

  dim:
    black:   '0x403c3a'
    red:     '0xa57b55'
    green:   '0x22947b'
    yellow:  '0x748c4a'
    blue:    '0x9478b0'
    magenta: '0xb46f8c'
    cyan:    '0x418da9'
    white:   '0x8a827e'


# Key Bindings -----------------------------------------------------------------

# Each binding is defined as an object with some properties.
# Most of the properties are optional.
# All of the alphabetical keys should have a letter for the `key` value such as `V`.
# Function keys are probably what you would expect as well (F1, F2, ..).
# The number keys above the main keyboard are encoded as `Key1`, `Key2`, etc.
# Keys on the number pad are encoded `Number1`, `Number2`, etc.
# These all match the glutin::VirtualKeyCode variants.

# Possible values for `mods`:
#   `Command`, `Super` refer to the super/command/windows key
#   `Control` for the control key
#   `Shift` for the Shift key
#   `Alt` and `Option` refer to alt/option

# mods may be combined with a `|`. For example, requiring control and shift looks like:
#   mods: Control|Shift

# The parser is currently quite sensitive to whitespace and capitalization -
# capitalization must match exactly, and piped items must not have whitespace around them.

# Either an `action`, `chars`, or `command` field must be present.
#   `action` must be one of `Paste`, `PasteSelection`, `Copy`, or `Quit`.
#   `chars` writes the specified string every time that binding is activated.
#     These should generally be escape sequences, but they can be configured to send arbitrary strings of bytes.
#   `command` must be a map containing a `program` string, and `args` array of strings.
#     For example:
#       - { ... , command: { program: "alacritty", args: ["-e", "vttest"] } }

key_bindings:
  - { key: V,        mods: Command, action: Paste                        }
  - { key: C,        mods: Command, action: Copy                         }
  - { key: Q,        mods: Command, action: Quit                         }

  - { key: Home,                    chars: "\x1bOH",   mode: AppCursor   }
  - { key: Home,                    chars: "\x1b[H",   mode: ~AppCursor  }
  - { key: End,                     chars: "\x1bOF",   mode: AppCursor   }
  - { key: End,                     chars: "\x1b[F",   mode: ~AppCursor  }
  - { key: PageUp,   mods: Shift,   chars: "\x1b[5;2~"                   }
  - { key: PageUp,   mods: Control, chars: "\x1b[5;5~"                   }
  - { key: PageUp,                  chars: "\x1b[5~"                     }
  - { key: PageDown, mods: Shift,   chars: "\x1b[6;2~"                   }
  - { key: PageDown, mods: Control, chars: "\x1b[6;5~"                   }
  - { key: PageDown,                chars: "\x1b[6~"                     }
  - { key: Left,     mods: Shift,   chars: "\x1b[1;2D"                   }
  - { key: Left,     mods: Control, chars: "\x1b[1;5D"                   }
  - { key: Left,     mods: Alt,     chars: "\x1b[1;3D"                   }
  - { key: Left,                    chars: "\x1b[D",   mode: ~AppCursor  }
  - { key: Left,                    chars: "\x1bOD",   mode: AppCursor   }
  - { key: Right,    mods: Shift,   chars: "\x1b[1;2C"                   }
  - { key: Right,    mods: Control, chars: "\x1b[1;5C"                   }
  - { key: Right,    mods: Alt,     chars: "\x1b[1;3C"                   }
  - { key: Right,                   chars: "\x1b[C",   mode: ~AppCursor  }
  - { key: Right,                   chars: "\x1bOC",   mode: AppCursor   }
  - { key: Up,       mods: Shift,   chars: "\x1b[1;2A"                   }
  - { key: Up,       mods: Control, chars: "\x1b[1;5A"                   }
  - { key: Up,       mods: Alt,     chars: "\x1b[1;3A"                   }
  - { key: Up,                      chars: "\x1b[A",   mode: ~AppCursor  }
  - { key: Up,                      chars: "\x1bOA",   mode: AppCursor   }
  - { key: Down,     mods: Shift,   chars: "\x1b[1;2B"                   }
  - { key: Down,     mods: Control, chars: "\x1b[1;5B"                   }
  - { key: Down,     mods: Alt,     chars: "\x1b[1;3B"                   }
  - { key: Down,                    chars: "\x1b[B",   mode: ~AppCursor  }
  - { key: Down,                    chars: "\x1bOB",   mode: AppCursor   }
  - { key: Tab,      mods: Shift,   chars: "\x1b[Z"                      }
  - { key: F1,                      chars: "\x1bOP"                      }
  - { key: F2,                      chars: "\x1bOQ"                      }
  - { key: F3,                      chars: "\x1bOR"                      }
  - { key: F4,                      chars: "\x1bOS"                      }
  - { key: F5,                      chars: "\x1b[15~"                    }
  - { key: F6,                      chars: "\x1b[17~"                    }
  - { key: F7,                      chars: "\x1b[18~"                    }
  - { key: F8,                      chars: "\x1b[19~"                    }
  - { key: F9,                      chars: "\x1b[20~"                    }
  - { key: F10,                     chars: "\x1b[21~"                    }
  - { key: F11,                     chars: "\x1b[23~"                    }
  - { key: F12,                     chars: "\x1b[24~"                    }
  - { key: Back,                    chars: "\x7f"                        }
  - { key: Back,     mods: Alt,     chars: "\x1b\x7f"                    }
  - { key: Insert,                  chars: "\x1b[2~"                     }
  - { key: Delete,                  chars: "\x1b[3~"                     }

  # make ctrl+space work as tmux prefix
  - { key: Space,    mods: Control, chars: "\x00"                        }

  # TODO setup a counter for derps-per-hour
  - { key: D, mods: Command, command: { program: "say", args: ["derp"] } }

  # Pass macOS standard Command keys to tmux
  # Command-1 actually sends Alt-1, which tmux interprets at M-1

  - { key: Key0, mods: Command, chars: "\x1b0" }
  - { key: Key1, mods: Command, chars: "\x1b1" }
  - { key: Key2, mods: Command, chars: "\x1b2" }
  - { key: Key3, mods: Command, chars: "\x1b3" }
  - { key: Key4, mods: Command, chars: "\x1b4" }
  - { key: Key5, mods: Command, chars: "\x1b5" }
  - { key: Key6, mods: Command, chars: "\x1b6" }
  - { key: Key7, mods: Command, chars: "\x1b7" }
  - { key: Key8, mods: Command, chars: "\x1b8" }
  - { key: Key9, mods: Command, chars: "\x1b9" }

  # Command-` same as Command-0 (for tmux)
  - { key: Grave, mods: Command, chars: "\x1b0" }

  - { key: K, mods: Command, chars: "\x1bk" }
  - { key: N, mods: Command, chars: "\x1bn" }
  - { key: T, mods: Command, chars: "\x1bt" }
  - { key: W, mods: Command, chars: "\x1bw" }
  - { key: X, mods: Command, chars: "\x1bx" }


# Mouse Bindings ---------------------------------------------------------------

# Currently doesn't support modifiers. Both the `mouse` and `action` fields must be specified.

# Values for `mouse`:
# - Middle
# - Left
# - Right
# - Numeric identifier such as `5`

# Values for `action`:
# - Paste
# - PasteSelection
# - Copy (TODO)

mouse_bindings:
  - { mouse: Middle, action: PasteSelection }

mouse:
  double_click: { threshold: 300 }
  triple_click: { threshold: 300 }

selection:
  semantic_escape_chars: ",â”‚`|:\"' ()[]{}<>"


# Other ------------------------------------------------------------------------

# Use custom cursor colors. If true, display the cursor in the cursor.foreground and cursor.background colors, otherwise invert the colors of the cursor.
custom_cursor_colors: false

hide_cursor_when_typing: false

# Live config reload (changes require restart)
live_config_reload: true

# Should display the render timer
render_timer: false

# When true, bold text is drawn using the bright variant of colors.
draw_bold_text_with_bright_colors: false

visual_bell:
  animation: EaseOutExpo
  duration: 1
